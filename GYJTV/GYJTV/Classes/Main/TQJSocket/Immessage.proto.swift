// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "IMMessage.proto"
// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
  public static let `default` = ImmessageRoot()
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
  }
  public func registerAllExtensions(registry: ExtensionRegistry) {
  }
}

final public class UserInfo : GeneratedMessage {

  public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
    fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
    fieldCheck = fieldCheck && (lhs.hasIconUrl == rhs.hasIconUrl) && (!lhs.hasIconUrl || lhs.iconUrl == rhs.iconUrl)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var level:Int32 = Int32(0)
  public fileprivate(set) var hasLevel:Bool = false

  public fileprivate(set) var name:String = ""
  public fileprivate(set) var hasName:Bool = false

  public fileprivate(set) var iconUrl:String = ""
  public fileprivate(set) var hasIconUrl:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasLevel {
      return false
    }
    if !hasName {
      return false
    }
    if !hasIconUrl {
      return false
    }
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasLevel {
      try codedOutputStream.writeInt32(fieldNumber: 1, value:level)
    }
    if hasName {
      try codedOutputStream.writeString(fieldNumber: 2, value:name)
    }
    if hasIconUrl {
      try codedOutputStream.writeString(fieldNumber: 3, value:iconUrl)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasLevel {
      serialize_size += level.computeInt32Size(fieldNumber: 1)
    }
    if hasName {
      serialize_size += name.computeStringSize(fieldNumber: 2)
    }
    if hasIconUrl {
      serialize_size += iconUrl.computeStringSize(fieldNumber: 3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> UserInfo.Builder {
    return UserInfo.classBuilder() as! UserInfo.Builder
  }
  public func getBuilder() -> UserInfo.Builder {
    return classBuilder() as! UserInfo.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return UserInfo.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return UserInfo.Builder()
  }
  public func toBuilder() throws -> UserInfo.Builder {
    return try UserInfo.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
    return try UserInfo.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasLevel {
      jsonMap["level"] = Int(level)
    }
    if hasName {
      jsonMap["name"] = name
    }
    if hasIconUrl {
      jsonMap["iconURL"] = iconUrl
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
    return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> UserInfo {
    return try UserInfo.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasLevel {
      output += "\(indent) level: \(level) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasIconUrl {
      output += "\(indent) iconUrl: \(iconUrl) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLevel {
             hashCode = (hashCode &* 31) &+ level.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasIconUrl {
             hashCode = (hashCode &* 31) &+ iconUrl.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "UserInfo"
  }
  override public func className() -> String {
      return "UserInfo"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:UserInfo = UserInfo()
    public func getMessage() -> UserInfo {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasLevel:Bool {
         get {
              return builderResult.hasLevel
         }
    }
    public var level:Int32 {
         get {
              return builderResult.level
         }
         set (value) {
             builderResult.hasLevel = true
             builderResult.level = value
         }
    }
    @discardableResult
    public func setLevel(_ value:Int32) -> UserInfo.Builder {
      self.level = value
      return self
    }
    @discardableResult
    public func clearLevel() -> UserInfo.Builder{
         builderResult.hasLevel = false
         builderResult.level = Int32(0)
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    @discardableResult
    public func setName(_ value:String) -> UserInfo.Builder {
      self.name = value
      return self
    }
    @discardableResult
    public func clearName() -> UserInfo.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasIconUrl:Bool {
         get {
              return builderResult.hasIconUrl
         }
    }
    public var iconUrl:String {
         get {
              return builderResult.iconUrl
         }
         set (value) {
             builderResult.hasIconUrl = true
             builderResult.iconUrl = value
         }
    }
    @discardableResult
    public func setIconUrl(_ value:String) -> UserInfo.Builder {
      self.iconUrl = value
      return self
    }
    @discardableResult
    public func clearIconUrl() -> UserInfo.Builder{
         builderResult.hasIconUrl = false
         builderResult.iconUrl = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> UserInfo.Builder {
      builderResult = UserInfo()
      return self
    }
    override public func clone() throws -> UserInfo.Builder {
      return try UserInfo.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> UserInfo {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> UserInfo {
      let returnMe:UserInfo = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
      if other == UserInfo() {
       return self
      }
      if other.hasLevel {
           level = other.level
      }
      if other.hasName {
           name = other.name
      }
      if other.hasIconUrl {
           iconUrl = other.iconUrl
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8:
          level = try codedInputStream.readInt32()

        case 18:
          name = try codedInputStream.readString()

        case 26:
          iconUrl = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
      let resultDecodedBuilder = UserInfo.Builder()
      if let jsonValueLevel = jsonMap["level"] as? Int {
        resultDecodedBuilder.level = Int32(jsonValueLevel)
      }
      if let jsonValueName = jsonMap["name"] as? String {
        resultDecodedBuilder.name = jsonValueName
      }
      if let jsonValueIconUrl = jsonMap["iconURL"] as? String {
        resultDecodedBuilder.iconUrl = jsonValueIconUrl
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> UserInfo.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

final public class ChatMessage : GeneratedMessage {

  public static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
    fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var user:UserInfo!
  public fileprivate(set) var hasUser:Bool = false
  public fileprivate(set) var text:String = ""
  public fileprivate(set) var hasText:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUser {
      return false
    }
    if !hasText {
      return false
    }
    if !user.isInitialized() {
      return false
    }
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasUser {
      try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
    }
    if hasText {
      try codedOutputStream.writeString(fieldNumber: 2, value:text)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUser {
        if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
            serialize_size += varSizeuser
        }
    }
    if hasText {
      serialize_size += text.computeStringSize(fieldNumber: 2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> ChatMessage.Builder {
    return ChatMessage.classBuilder() as! ChatMessage.Builder
  }
  public func getBuilder() -> ChatMessage.Builder {
    return classBuilder() as! ChatMessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return ChatMessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return ChatMessage.Builder()
  }
  public func toBuilder() throws -> ChatMessage.Builder {
    return try ChatMessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:ChatMessage) throws -> ChatMessage.Builder {
    return try ChatMessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasUser {
      jsonMap["user"] = try user.encode()
    }
    if hasText {
      jsonMap["text"] = text
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ChatMessage {
    return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> ChatMessage {
    return try ChatMessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasUser {
      output += "\(indent) user {\n"
      if let outDescUser = user {
        output += try outDescUser.getDescription(indent: "\(indent)  ")
      }
      output += "\(indent) }\n"
    }
    if hasText {
      output += "\(indent) text: \(text) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUser {
              if let hashValueuser = user?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueuser
              }
          }
          if hasText {
             hashCode = (hashCode &* 31) &+ text.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ChatMessage"
  }
  override public func className() -> String {
      return "ChatMessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:ChatMessage = ChatMessage()
    public func getMessage() -> ChatMessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUser:Bool {
         get {
             return builderResult.hasUser
         }
    }
    public var user:UserInfo! {
         get {
             if userBuilder_ != nil {
                builderResult.user = userBuilder_.getMessage()
             }
             return builderResult.user
         }
         set (value) {
             builderResult.hasUser = true
             builderResult.user = value
         }
    }
    fileprivate var userBuilder_:UserInfo.Builder! {
         didSet {
            builderResult.hasUser = true
         }
    }
    public func getUserBuilder() -> UserInfo.Builder {
      if userBuilder_ == nil {
         userBuilder_ = UserInfo.Builder()
         builderResult.user = userBuilder_.getMessage()
         if user != nil {
            try! userBuilder_.mergeFrom(other: user)
         }
      }
      return userBuilder_
    }
    @discardableResult
    public func setUser(_ value:UserInfo!) -> ChatMessage.Builder {
      self.user = value
      return self
    }
    @discardableResult
    public func mergeUser(value:UserInfo) throws -> ChatMessage.Builder {
      if builderResult.hasUser {
        builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
      } else {
        builderResult.user = value
      }
      builderResult.hasUser = true
      return self
    }
    @discardableResult
    public func clearUser() -> ChatMessage.Builder {
      userBuilder_ = nil
      builderResult.hasUser = false
      builderResult.user = nil
      return self
    }
    public var hasText:Bool {
         get {
              return builderResult.hasText
         }
    }
    public var text:String {
         get {
              return builderResult.text
         }
         set (value) {
             builderResult.hasText = true
             builderResult.text = value
         }
    }
    @discardableResult
    public func setText(_ value:String) -> ChatMessage.Builder {
      self.text = value
      return self
    }
    @discardableResult
    public func clearText() -> ChatMessage.Builder{
         builderResult.hasText = false
         builderResult.text = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> ChatMessage.Builder {
      builderResult = ChatMessage()
      return self
    }
    override public func clone() throws -> ChatMessage.Builder {
      return try ChatMessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> ChatMessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ChatMessage {
      let returnMe:ChatMessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:ChatMessage) throws -> ChatMessage.Builder {
      if other == ChatMessage() {
       return self
      }
      if (other.hasUser) {
          try mergeUser(value: other.user)
      }
      if other.hasText {
           text = other.text
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ChatMessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          let subBuilder:UserInfo.Builder = UserInfo.Builder()
          if hasUser {
            try subBuilder.mergeFrom(other: user)
          }
          try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
          user = subBuilder.buildPartial()

        case 18:
          text = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ChatMessage.Builder {
      let resultDecodedBuilder = ChatMessage.Builder()
      if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
        resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

      }
      if let jsonValueText = jsonMap["text"] as? String {
        resultDecodedBuilder.text = jsonValueText
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> ChatMessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

final public class GiftMessage : GeneratedMessage {

  public static func == (lhs: GiftMessage, rhs: GiftMessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
    fieldCheck = fieldCheck && (lhs.hasGiftname == rhs.hasGiftname) && (!lhs.hasGiftname || lhs.giftname == rhs.giftname)
    fieldCheck = fieldCheck && (lhs.hasGiftUrl == rhs.hasGiftUrl) && (!lhs.hasGiftUrl || lhs.giftUrl == rhs.giftUrl)
    fieldCheck = fieldCheck && (lhs.hasGiftcount == rhs.hasGiftcount) && (!lhs.hasGiftcount || lhs.giftcount == rhs.giftcount)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var user:UserInfo!
  public fileprivate(set) var hasUser:Bool = false
  public fileprivate(set) var giftname:String = ""
  public fileprivate(set) var hasGiftname:Bool = false

  public fileprivate(set) var giftUrl:String = ""
  public fileprivate(set) var hasGiftUrl:Bool = false

  public fileprivate(set) var giftcount:Int32 = Int32(0)
  public fileprivate(set) var hasGiftcount:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUser {
      return false
    }
    if !hasGiftname {
      return false
    }
    if !hasGiftUrl {
      return false
    }
    if !hasGiftcount {
      return false
    }
    if !user.isInitialized() {
      return false
    }
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasUser {
      try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
    }
    if hasGiftname {
      try codedOutputStream.writeString(fieldNumber: 2, value:giftname)
    }
    if hasGiftUrl {
      try codedOutputStream.writeString(fieldNumber: 3, value:giftUrl)
    }
    if hasGiftcount {
      try codedOutputStream.writeInt32(fieldNumber: 4, value:giftcount)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUser {
        if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
            serialize_size += varSizeuser
        }
    }
    if hasGiftname {
      serialize_size += giftname.computeStringSize(fieldNumber: 2)
    }
    if hasGiftUrl {
      serialize_size += giftUrl.computeStringSize(fieldNumber: 3)
    }
    if hasGiftcount {
      serialize_size += giftcount.computeInt32Size(fieldNumber: 4)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> GiftMessage.Builder {
    return GiftMessage.classBuilder() as! GiftMessage.Builder
  }
  public func getBuilder() -> GiftMessage.Builder {
    return classBuilder() as! GiftMessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return GiftMessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return GiftMessage.Builder()
  }
  public func toBuilder() throws -> GiftMessage.Builder {
    return try GiftMessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:GiftMessage) throws -> GiftMessage.Builder {
    return try GiftMessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasUser {
      jsonMap["user"] = try user.encode()
    }
    if hasGiftname {
      jsonMap["giftname"] = giftname
    }
    if hasGiftUrl {
      jsonMap["giftURL"] = giftUrl
    }
    if hasGiftcount {
      jsonMap["giftcount"] = Int(giftcount)
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GiftMessage {
    return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> GiftMessage {
    return try GiftMessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasUser {
      output += "\(indent) user {\n"
      if let outDescUser = user {
        output += try outDescUser.getDescription(indent: "\(indent)  ")
      }
      output += "\(indent) }\n"
    }
    if hasGiftname {
      output += "\(indent) giftname: \(giftname) \n"
    }
    if hasGiftUrl {
      output += "\(indent) giftUrl: \(giftUrl) \n"
    }
    if hasGiftcount {
      output += "\(indent) giftcount: \(giftcount) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUser {
              if let hashValueuser = user?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueuser
              }
          }
          if hasGiftname {
             hashCode = (hashCode &* 31) &+ giftname.hashValue
          }
          if hasGiftUrl {
             hashCode = (hashCode &* 31) &+ giftUrl.hashValue
          }
          if hasGiftcount {
             hashCode = (hashCode &* 31) &+ giftcount.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GiftMessage"
  }
  override public func className() -> String {
      return "GiftMessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:GiftMessage = GiftMessage()
    public func getMessage() -> GiftMessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUser:Bool {
         get {
             return builderResult.hasUser
         }
    }
    public var user:UserInfo! {
         get {
             if userBuilder_ != nil {
                builderResult.user = userBuilder_.getMessage()
             }
             return builderResult.user
         }
         set (value) {
             builderResult.hasUser = true
             builderResult.user = value
         }
    }
    fileprivate var userBuilder_:UserInfo.Builder! {
         didSet {
            builderResult.hasUser = true
         }
    }
    public func getUserBuilder() -> UserInfo.Builder {
      if userBuilder_ == nil {
         userBuilder_ = UserInfo.Builder()
         builderResult.user = userBuilder_.getMessage()
         if user != nil {
            try! userBuilder_.mergeFrom(other: user)
         }
      }
      return userBuilder_
    }
    @discardableResult
    public func setUser(_ value:UserInfo!) -> GiftMessage.Builder {
      self.user = value
      return self
    }
    @discardableResult
    public func mergeUser(value:UserInfo) throws -> GiftMessage.Builder {
      if builderResult.hasUser {
        builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
      } else {
        builderResult.user = value
      }
      builderResult.hasUser = true
      return self
    }
    @discardableResult
    public func clearUser() -> GiftMessage.Builder {
      userBuilder_ = nil
      builderResult.hasUser = false
      builderResult.user = nil
      return self
    }
    public var hasGiftname:Bool {
         get {
              return builderResult.hasGiftname
         }
    }
    public var giftname:String {
         get {
              return builderResult.giftname
         }
         set (value) {
             builderResult.hasGiftname = true
             builderResult.giftname = value
         }
    }
    @discardableResult
    public func setGiftname(_ value:String) -> GiftMessage.Builder {
      self.giftname = value
      return self
    }
    @discardableResult
    public func clearGiftname() -> GiftMessage.Builder{
         builderResult.hasGiftname = false
         builderResult.giftname = ""
         return self
    }
    public var hasGiftUrl:Bool {
         get {
              return builderResult.hasGiftUrl
         }
    }
    public var giftUrl:String {
         get {
              return builderResult.giftUrl
         }
         set (value) {
             builderResult.hasGiftUrl = true
             builderResult.giftUrl = value
         }
    }
    @discardableResult
    public func setGiftUrl(_ value:String) -> GiftMessage.Builder {
      self.giftUrl = value
      return self
    }
    @discardableResult
    public func clearGiftUrl() -> GiftMessage.Builder{
         builderResult.hasGiftUrl = false
         builderResult.giftUrl = ""
         return self
    }
    public var hasGiftcount:Bool {
         get {
              return builderResult.hasGiftcount
         }
    }
    public var giftcount:Int32 {
         get {
              return builderResult.giftcount
         }
         set (value) {
             builderResult.hasGiftcount = true
             builderResult.giftcount = value
         }
    }
    @discardableResult
    public func setGiftcount(_ value:Int32) -> GiftMessage.Builder {
      self.giftcount = value
      return self
    }
    @discardableResult
    public func clearGiftcount() -> GiftMessage.Builder{
         builderResult.hasGiftcount = false
         builderResult.giftcount = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> GiftMessage.Builder {
      builderResult = GiftMessage()
      return self
    }
    override public func clone() throws -> GiftMessage.Builder {
      return try GiftMessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> GiftMessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GiftMessage {
      let returnMe:GiftMessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:GiftMessage) throws -> GiftMessage.Builder {
      if other == GiftMessage() {
       return self
      }
      if (other.hasUser) {
          try mergeUser(value: other.user)
      }
      if other.hasGiftname {
           giftname = other.giftname
      }
      if other.hasGiftUrl {
           giftUrl = other.giftUrl
      }
      if other.hasGiftcount {
           giftcount = other.giftcount
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GiftMessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          let subBuilder:UserInfo.Builder = UserInfo.Builder()
          if hasUser {
            try subBuilder.mergeFrom(other: user)
          }
          try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
          user = subBuilder.buildPartial()

        case 18:
          giftname = try codedInputStream.readString()

        case 26:
          giftUrl = try codedInputStream.readString()

        case 32:
          giftcount = try codedInputStream.readInt32()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GiftMessage.Builder {
      let resultDecodedBuilder = GiftMessage.Builder()
      if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
        resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

      }
      if let jsonValueGiftname = jsonMap["giftname"] as? String {
        resultDecodedBuilder.giftname = jsonValueGiftname
      }
      if let jsonValueGiftUrl = jsonMap["giftURL"] as? String {
        resultDecodedBuilder.giftUrl = jsonValueGiftUrl
      }
      if let jsonValueGiftcount = jsonMap["giftcount"] as? Int {
        resultDecodedBuilder.giftcount = Int32(jsonValueGiftcount)
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> GiftMessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

extension UserInfo: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
    var mergedArray = Array<UserInfo>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
    return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
    return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension ChatMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ChatMessage> {
    var mergedArray = Array<ChatMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> ChatMessage? {
    return try ChatMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
    return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension GiftMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GiftMessage> {
    var mergedArray = Array<GiftMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> GiftMessage? {
    return try GiftMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
    return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
